[
["index.html", "kableExtra Cookbook Chapter 1 Prerequisites", " kableExtra Cookbook Sharla Gelfand 2020-04-19 Chapter 1 Prerequisites If you want to render to PDF… install tinytex. "],
["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction "],
["the-basics.html", "Chapter 3 The basics 3.1 Create a basic table 3.2 Change column names 3.3 Change the column alignment 3.4 Add a table caption", " Chapter 3 The basics 3.1 Create a basic table library(knitr) library(kableExtra) 3.1.1 Example data You can read in some data from the dslabs package on infectious disease cases in US states and check it out: library(tidyverse) library(dslabs) data(&quot;us_contagious_diseases&quot;) us_contagious_diseases %&gt;% slice(1:3) ## disease state year weeks_reporting count population ## 1 Hepatitis A Alabama 1966 50 321 3345787 ## 2 Hepatitis A Alabama 1967 49 291 3364130 ## 3 Hepatitis A Alabama 1968 52 314 3386068 us_contagious_diseases %&gt;% summary() ## disease state year weeks_reporting ## Hepatitis A:2346 Alabama : 315 Min. :1928 Min. : 0.00 ## Measles :3825 Alaska : 315 1st Qu.:1950 1st Qu.:31.00 ## Mumps :1785 Arizona : 315 Median :1975 Median :46.00 ## Pertussis :2856 Arkansas : 315 Mean :1971 Mean :37.38 ## Polio :2091 California: 315 3rd Qu.:1990 3rd Qu.:50.00 ## Rubella :1887 Colorado : 315 Max. :2011 Max. :52.00 ## Smallpox :1275 (Other) :14175 ## count population ## Min. : 0 Min. : 86853 ## 1st Qu.: 7 1st Qu.: 1018755 ## Median : 69 Median : 2749249 ## Mean : 1492 Mean : 4107584 ## 3rd Qu.: 525 3rd Qu.: 4996229 ## Max. :132342 Max. :37607525 ## NA&#39;s :214 With this data, you can create a basic table with the total counts of pertussis by state over the period of the data (1928–2011), limiting to the top 10 states. First, you can use tidyverse code to create the dataframe with the data you’d like to show in the table: top_10_data &lt;- us_contagious_diseases %&gt;% filter(disease == &quot;Pertussis&quot;) %&gt;% group_by(state) %&gt;% summarize(total_count = sum(count)) %&gt;% arrange(desc(total_count)) %&gt;% slice(1:10) 3.1.2 Creating a basic table Then, you can use the kable function to create a basic PDF table: top_10_data %&gt;% kable() state total_count New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 The booktabs = TRUE option, if you include it in the kable function call, will give some cleaner default formatting for the table: top_10_data %&gt;% kable(booktabs = TRUE) state total_count New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 Example change. 3.2 Change column names 3.2.1 Basics of changing column names By default, each column will have the same name as the column name in the data that is input to kable. You can easily change those, though, with the col.names option. You just put in a character vector with as many values as you have columns, giving the names you would prefer: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 3.2.2 Changing formatting in column names The kableExtra package includes a row_spec function. This will make changes to the formatting of a specific row in the table. You can use this for any row, and that includes the row with the column headers. The kableExtra conventions consider this as row 0. For example, you can put the column headers in italics by setting italic = TRUE in a row_spec call for row 0: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, italic = TRUE) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 If you would like to underline the column headers, you can set underline = TRUE in the row_spec call for row 0: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, underline = TRUE) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 You can change the color of the column names by using the color option in the row_spec call: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, color = &quot;dodgerblue&quot;) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 This function uses the R colornames, so you can check out those at sites like http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf. It will also accept colors specified by hexadecimal code in the “#BBBBBB” format: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, color = &quot;#FF5733&quot;) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 You can check out websites on hexadecimal color codes at places like https://htmlcolorcodes.com/ to learn more about using these conventions to specify the color. If you’d like to change the background color and the text color, you can add a specification for the “background” option in the row_spec call for row 0: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, color = &quot;white&quot;, background = &quot;#FF5733&quot;) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 You can change the font size of the column names, without changing the font size for the rest of the table, with the font_size parameter in row_spec for row 0. The default text size is somewhere in the “14” range, so pick larger numbers to make the text larger in the column names and smaller numbers to make the text smaller. top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;)) %&gt;% row_spec(row = 0, font_size = 20) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 3.2.3 Adding footnotes to column names You can also add footnotes based on a column name. This gets just a touch more complex, because what you actually need to do is rename the column name to include the footnote marker in the column’s name. These markers can be added with functions that start with footnote_marker. For example, footnote_marker_alphabet gives letters for each footnote. The other options are footnote_marker_number and footnote_marker_symbol. You can add one of these to a column name directly in the col.names vector of column names by using paste0 to add the marker on to the existing column name. You’ll put in 1 for the argument for the first footmark of a certain type, 2 for the second, and so on. Once you’ve added this footnote marker, you’ll need to also add the footnote itself. You do this with the footnote function. In this function, you can add a vector the same length as the number of footnotes of that type (alphabet, symbol, or number) with the footnote text in order. For a simple example, the following code will add a single footnote for a single column header, using a symbol to denote the footnote: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, paste0(&quot;Total Pertussis Cases&quot;, footnote_marker_symbol(1))), escape = FALSE) %&gt;% footnote(symbol = &quot;Includes all cases for 1928--2011&quot;) State Total Pertussis Cases* New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 * Includes all cases for 1928–2011 Here is an example of adding footnotes to two column names, using alphabetical symbols: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(paste0(&quot;State&quot;, footnote_marker_alphabet(1)), paste0(&quot;Total Pertussis Cases&quot;, footnote_marker_alphabet(2))), escape = FALSE) %&gt;% footnote(alphabet = c(&quot;Top 10 states in terms of total case counts.&quot;, &quot;Includes all cases for 1928--2011.&quot;)) Statea Total Pertussis Casesb New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 a Top 10 states in terms of total case counts. b Includes all cases for 1928–2011. 3.3 Change the column alignment You might want to change how the values in each column are aligned. By default, the numeric columns will be right-aligned and all others will be left-aligned, but you might want something different, like everything to be centered. You can use the align parameter in the kable function to change the column alignment. This parameter takes a character vector that combines the letters “c”, “l”, and “r”. These stand for center aligned (“c”), left-aligned (“l”), and right-aligned (“r”). If you’d like all of your columns to be aligned in the same way (for example, all center-aligned), you can just put one character into the argument for align. For example, the following code will center-aligned both of the two columns in the example table: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;), align = &quot;c&quot;) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 If you want to set different alignments for different columns, you will need to include as many characters in the argument to the align parameter as there are columns in the dataframe. You will line up the characters with the columns—for example, if you want the first column to be right-aligned and the next to be center-aligned, you could do that with the argument \"rc\", where “r” is in the first position to stand for the first column and “c” is in the second position to stand for the second column: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;), align = &quot;rc&quot;) State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 3.4 Add a table caption You can add a caption to your table with the caption parameter. This lets you put your caption in a character string, and it will be added to the table output: top_10_data %&gt;% kable(booktabs = TRUE, col.names = c(&quot;State&quot;, &quot;Total Pertussis Cases&quot;), caption = &quot;States with most total cases of Pertussis&quot;) Table 3.1: States with most total cases of Pertussis State Total Pertussis Cases New York 214266 Texas 191626 Pennsylvania 160331 California 155110 Michigan 136302 Ohio 124964 Wisconsin 116211 New Jersey 109192 Massachusetts 105285 Illinois 103115 The captions will be numbered based on their order in the document. If you’re building a fancier document (like the bookdown book we’ve created here), the table numbering will start with the chapter’s number and then given the number of the table within that chapter. "],
["tidyverse-kableextra-pipelines.html", "Chapter 4 Tidyverse / kableExtra pipelines 4.1 Example data", " Chapter 4 Tidyverse / kableExtra pipelines To really levarage the power of R for tables, you’ll likely want to get in the habit of creating pipelines that use functions from the tidyverse package to reshape or clean your data before piping that data into kable and kableExtra functions to create the table. This section will walk through some examples of this pipeline, and how it can provide a powerful approach for creating tables from data in R. 4.1 Example data Again, this section uses a dataset from the dslabs package called “us_contagious_diseases”. You can load that data by loading the dslabs package (if you don’t have it, you can install it with install.packages(\"dslabs\")) and then using the data function to load the dataset: library(dslabs) data(&quot;us_contagious_diseases&quot;) This dataset includes counts by states for various infectious diseases. It gives these counts by year over a several decades. It also gives the number of weeks for which that state reported data that year and the population of the state that year (in case you’d like to calculate rates): us_contagious_diseases %&gt;% slice(1:4) ## disease state year weeks_reporting count population ## 1 Hepatitis A Alabama 1966 50 321 3345787 ## 2 Hepatitis A Alabama 1967 49 291 3364130 ## 3 Hepatitis A Alabama 1968 52 314 3386068 ## 4 Hepatitis A Alabama 1969 49 380 3412450 One quick table we might want to create may be a table where each state is listed, with the range of years that the state reported data. This way, we can quickly see the years that each state reported cases for each disease, and if all states have data for the same number of years. To do this, we’ll need to get a summary from each combination of state and disease, where we get the minimum and maximum values of year for that combination. Then, we can paste those values together to get the year range. We can select just the columns we need for the final table, getting rid of any extra columns we created along the way to help with our calculation. Finally, this table will look much nicer if we have a separate column for each disease (while “long” data is easier to work with when coding, “wide” data often is clearer in a presentation format). The pivot_wider can do that reshaping. Here’s the full pipeline: us_contagious_diseases %&gt;% # Get the year range for each combination of state and disease # by grouping by these variables and then using summarize group_by(state, disease) %&gt;% summarize(earliest_year = min(year), latest_year = max(year)) %&gt;% # Use `mutate` to make a new column that presents this range more # nicely (the `unite` function could work here, too) mutate(years = paste0(earliest_year, &quot;--&quot;, latest_year)) %&gt;% # Limit to just the data you want to present in the table select(state, disease, years) %&gt;% # Reshape the data, so that each disease gets its own column pivot_wider(names_from = &quot;disease&quot;, values_from = &quot;years&quot;) %&gt;% # Send to `kable` for formatting as a table kable(booktabs = TRUE) %&gt;% # Make the font size a bit smaller than the default, so the date ranges # will be shown on one line each kable_styling(font_size = 10) state Hepatitis A Measles Mumps Pertussis Polio Rubella Smallpox Alabama 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Alaska 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Arizona 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Arkansas 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 California 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Colorado 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Connecticut 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Delaware 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 District Of Columbia 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Florida 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Georgia 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Hawaii 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Idaho 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Illinois 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Indiana 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Iowa 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Kansas 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Kentucky 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Louisiana 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Maine 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Maryland 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Massachusetts 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Michigan 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Minnesota 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Mississippi 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Missouri 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Montana 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Nebraska 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Nevada 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 New Hampshire 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 New Jersey 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 New Mexico 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 New York 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 North Carolina 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 North Dakota 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Ohio 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Oklahoma 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Oregon 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Pennsylvania 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Rhode Island 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 South Carolina 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 South Dakota 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Tennessee 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Texas 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Utah 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Vermont 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Virginia 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Washington 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 West Virginia 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Wisconsin 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 Wyoming 1966–2011 1928–2002 1968–2002 1938–2011 1928–1968 1966–2002 1928–1952 "],
["how-to.html", "Chapter 5 How to… 5.1 Make a table full width 5.2 Add a top header 5.3 Bold columns or rows 5.4 Dynamically make changes 5.5 Take advantage of PDF-only features", " Chapter 5 How to… 5.1 Make a table full width 5.2 Add a top header 5.3 Bold columns or rows 5.4 Dynamically make changes You might want to make changes to your tables that depend on features of your data that aren’t known in advance or can’t be hardcoded. Let’s look at the comma_survey data set, which polled Americans on the oxford comma and other grammatical concepts. In particular, we’ll look at the education of those who care about the debate of whether “data” is a singular or plural noun: library(fivethirtyeight) library(tidyverse) data_noun &lt;- comma_survey %&gt;% filter(!is.na(care_data)) %&gt;% select(education, care_data) data_noun ## # A tibble: 1,091 x 2 ## education care_data ## &lt;ord&gt; &lt;ord&gt; ## 1 Bachelor degree Not much ## 2 Graduate degree Not much ## 3 &lt;NA&gt; Not at all ## 4 Less than high school degree Some ## 5 &lt;NA&gt; Not much ## 6 Some college or Associate degree Some ## 7 Some college or Associate degree Some ## 8 Some college or Associate degree A lot ## 9 Graduate degree Not much ## 10 Bachelor degree Some ## # … with 1,081 more rows We want to make a table of what percent, by education, answered each of “Not much”, “Not at all”, “Some”, and “A lot” to the question: “How much, if at all, do you care about the debate over the use of the word”data\" as a singular or plural noun?\". First, we need to do some wrangling to replace NA values of Education with “Education unknown”, and to calculate the percent of each response. library(scales) data_noun_percent &lt;- data_noun %&gt;% mutate(education = fct_explicit_na(education, na_level = &quot;Education unknown&quot;)) %&gt;% group_by(education, care_data) %&gt;% summarise(n = n()) %&gt;% mutate( prop = n / sum(n), percent = percent(prop) ) %&gt;% ungroup() %&gt;% select(-n) data_noun_percent ## # A tibble: 24 x 4 ## education care_data prop percent ## &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Less than high school degree Not at all 0.273 27.3% ## 2 Less than high school degree Not much 0.455 45.5% ## 3 Less than high school degree Some 0.182 18.2% ## 4 Less than high school degree A lot 0.0909 9.1% ## 5 High school degree Not at all 0.28 28.0% ## 6 High school degree Not much 0.34 34.0% ## 7 High school degree Some 0.3 30.0% ## 8 High school degree A lot 0.08 8.0% ## 9 Some college or Associate degree Not at all 0.2 20.0% ## 10 Some college or Associate degree Not much 0.403 40.3% ## # … with 14 more rows Then reshape the data: data_noun_percent_wide &lt;- data_noun_percent %&gt;% select(-prop) %&gt;% pivot_wider( names_from = &quot;care_data&quot;, values_from = &quot;percent&quot; ) data_noun_percent_wide ## # A tibble: 6 x 5 ## education `Not at all` `Not much` Some `A lot` ## &lt;ord&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Less than high school degree 27.3% 45.5% 18.2% 9.1% ## 2 High school degree 28.0% 34.0% 30.0% 8.0% ## 3 Some college or Associate degree 20.0% 40.3% 29.8% 9.8% ## 4 Bachelor degree 18.90% 35.47% 35.76% 9.88% ## 5 Graduate degree 13.0% 37.3% 31.9% 17.8% ## 6 Education unknown 18% 31% 32% 18% Then, we can make a table. We’ll clean up the column names, make sure the education column is left aligned and the responses are right aligned, and add a top header with the question “How much, if at all, do you care about the debate over the use of the word ‘data’ as a singular or plural noun?” above the “Not at all”, “Not much”, “Some”, and “A lot” columns: library(kableExtra) data_noun_percent_wide %&gt;% kable( col.names = c(&quot;Education&quot;, &quot;Not at all&quot;, &quot;Not much&quot;, &quot;Some&quot;, &quot;A lot&quot;), align = c(&quot;lrrrr&quot;) ) %&gt;% add_header_above(header = c(&quot; &quot; = 1, &quot;How much, if at all, do you care about the debate over the use of the word &#39;data&#39; as a singular or plural noun?&quot; = 4)) How much, if at all, do you care about the debate over the use of the word ‘data’ as a singular or plural noun? Education Not at all Not much Some A lot Less than high school degree 27.3% 45.5% 18.2% 9.1% High school degree 28.0% 34.0% 30.0% 8.0% Some college or Associate degree 20.0% 40.3% 29.8% 9.8% Bachelor degree 18.90% 35.47% 35.76% 9.88% Graduate degree 13.0% 37.3% 31.9% 17.8% Education unknown 18% 31% 32% 18% Doing this required us to hardcode in the question responses and the number of columns (4) corresponding to them (both for the header above, and for the column alignment). Our code is now fragile if this isn’t known in advance, or could change! Instead, we can think about it this way: we know that the first column contains Education and the rest contain the answers. So, we can set the column names, alignment, and the header using attributes of data_noun_percent_wide. For col.names and align, we can quickly use names() and ncol(), respectively: k &lt;- data_noun_percent_wide %&gt;% kable( col.names = c( &quot;Education&quot;, names(data_noun_percent_wide)[-1] ), align = c(&quot;l&quot;, rep(&quot;r&quot;, ncol(data_noun_percent_wide) - 1)) ) k Education Not at all Not much Some A lot Less than high school degree 27.3% 45.5% 18.2% 9.1% High school degree 28.0% 34.0% 30.0% 8.0% Some college or Associate degree 20.0% 40.3% 29.8% 9.8% Bachelor degree 18.90% 35.47% 35.76% 9.88% Graduate degree 13.0% 37.3% 31.9% 17.8% Education unknown 18% 31% 32% 18% And for the header, we can create a named vector with the number of columns each header spans (again, using ncol()): k_header &lt;- c(1, ncol(data_noun_percent_wide) - 1) names(k_header) &lt;- c(&quot; &quot;, &quot;How much, if at all, do you care about the debate over the use of the word &#39;data&#39; as a singular or plural noun?&quot;) k %&gt;% add_header_above(header = k_header) How much, if at all, do you care about the debate over the use of the word ‘data’ as a singular or plural noun? Education Not at all Not much Some A lot Less than high school degree 27.3% 45.5% 18.2% 9.1% High school degree 28.0% 34.0% 30.0% 8.0% Some college or Associate degree 20.0% 40.3% 29.8% 9.8% Bachelor degree 18.90% 35.47% 35.76% 9.88% Graduate degree 13.0% 37.3% 31.9% 17.8% Education unknown 18% 31% 32% 18% Now our code is more robust and can easily adapt to changes in the data (e.g., if there were additional responses). We might want to do other things, too, like bold the cell with the highest percent for each of the levels of Education. To do this, we can use cell_spec() to set values of percent to bold if they are the highest value of prop (the unformatted percent) for their level of education. data_noun_bold_highest_prop &lt;- data_noun_percent %&gt;% group_by(education) %&gt;% mutate(highest_prop = max(prop)) %&gt;% mutate(percent = cell_spec(percent, format = &quot;html&quot;, bold = prop == highest_prop)) data_noun_bold_highest_prop ## # A tibble: 24 x 5 ## # Groups: education [6] ## education care_data prop percent highest_prop ## &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Less than high sch… Not at a… 0.273 &quot;&lt;span style=\\&quot; \\&quot; &gt;27… 0.455 ## 2 Less than high sch… Not much 0.455 &quot;&lt;span style=\\&quot; font-weigh… 0.455 ## 3 Less than high sch… Some 0.182 &quot;&lt;span style=\\&quot; \\&quot; &gt;18… 0.455 ## 4 Less than high sch… A lot 0.0909 &quot;&lt;span style=\\&quot; \\&quot; &gt;9.… 0.455 ## 5 High school degree Not at a… 0.28 &quot;&lt;span style=\\&quot; \\&quot; &gt;28… 0.34 ## 6 High school degree Not much 0.34 &quot;&lt;span style=\\&quot; font-weigh… 0.34 ## 7 High school degree Some 0.3 &quot;&lt;span style=\\&quot; \\&quot; &gt;30… 0.34 ## 8 High school degree A lot 0.08 &quot;&lt;span style=\\&quot; \\&quot; &gt;8.… 0.34 ## 9 Some college or As… Not at a… 0.2 &quot;&lt;span style=\\&quot; \\&quot; &gt;20… 0.403 ## 10 Some college or As… Not much 0.403 &quot;&lt;span style=\\&quot; font-weigh… 0.403 ## # … with 14 more rows This applies HTML formatting to percent (specifically, bold formatting to the highest value for each level of education) that will be picked up by kableExtra. Then, we again reshape the data to a wide format and create a table. This time, we need to set escape = FALSE in kable() to let it know that there is HTML in the cells that should not be escaped (i.e., not treated as regular text): data_noun_bold_highest_prop_wide &lt;- data_noun_bold_highest_prop %&gt;% select(-prop, -highest_prop) %&gt;% pivot_wider( names_from = &quot;care_data&quot;, values_from = &quot;percent&quot; ) k_header &lt;- c(1, ncol(data_noun_bold_highest_prop_wide) - 1) names(k_header) &lt;- c(&quot; &quot;, &quot;How much, if at all, do you care about the debate over the use of the word &#39;data&#39; as a singular or plural noun?&quot;) data_noun_bold_highest_prop_wide %&gt;% kable(&quot;html&quot;, col.names = c(&quot;Education&quot;, names(data_noun_bold_highest_prop_wide)[-1]), align = c(&quot;l&quot;, rep(&quot;r&quot;, ncol(data_noun_bold_highest_prop_wide) - 1)), escape = FALSE ) %&gt;% add_header_above(header = k_header) How much, if at all, do you care about the debate over the use of the word ‘data’ as a singular or plural noun? Education Not at all Not much Some A lot Less than high school degree 27.3% 45.5% 18.2% 9.1% High school degree 28.0% 34.0% 30.0% 8.0% Some college or Associate degree 20.0% 40.3% 29.8% 9.8% Bachelor degree 18.90% 35.47% 35.76% 9.88% Graduate degree 13.0% 37.3% 31.9% 17.8% Education unknown 18% 31% 32% 18% This way, we can apply formatting based on specific values of the data, which may change. 5.5 Take advantage of PDF-only features Example code that will allow us to embed PDF-only table output. This uses a couple of basic examples of doing this, with code from the dslabs package. library(tidyverse) library(dslabs) data(&quot;us_contagious_diseases&quot;) top_10_data &lt;- us_contagious_diseases %&gt;% filter(disease == &quot;Pertussis&quot;) %&gt;% group_by(state) %&gt;% summarize(total_count = sum(count)) %&gt;% arrange(desc(total_count)) %&gt;% slice(1:10) Then, you can use the kable function to create a basic PDF table: top_10_data %&gt;% kable(format = &quot;latex&quot;) The booktabs = TRUE option, if you include it in the kable function call, will give some cleaner default formatting for the table: top_10_data %&gt;% kable(format = &quot;latex&quot;, booktabs = TRUE) "],
["wild-caught-tables.html", "Chapter 6 Wild-caught Tables", " Chapter 6 Wild-caught Tables "]
]
